
@inherits Panel

<root>
    <div class="container">
    <div class="header">
        <label class="title">JUMPER</label>
        <label class="stats">@(JumperGame.Current.IsEditorMode ? "EDITOR MODE PROGRESS NOT SAVED" : "STATS")</label>
    </div>
    <div class="rows">
        <div class="row">
            <label class="title">NAME</label>
            <label class="stat">@Game.LocalClient?.Name</label>
        </div>
        <div class="row">
            <label class="title">PLAYTIME</label>
            <label class="stat">@YourSessionTime</label>
        </div>
        <div class="row">
            <label class="title">JUMPS</label>
            <label class="stat">@Jumps</label>
        </div>
        <div class="row">
            <label class="title">BEST HEIGHT</label>
            <label class="stat">@MaxHeight</label>
        </div>
        <div class="row">
            <label class="title">FALLS</label>
            <label class="stat">@Falls</label>
        </div>
        <div class="row">
            <label class="title">COMPLETIONS</label>
            <label class="stat">@Completions</label>
        </div>        
    </div>
    <button onclick="@Restart">Restart</button>
     </div>
</root>

@code {
    private int? Jumps => (Game.LocalPawn as JumperPawn)?.TotalJumps;
    private int? Falls => (Game.LocalPawn as JumperPawn)?.TotalFalls;
    private int? Completions => (Game.LocalPawn as JumperPawn)?.Completions;
    private float? MaxHeight => Progress.Current?.BestHeight;
	
    private string YourSessionTime;

    private JumperPawn Pawn => (Game.LocalPawn as JumperPawn);
	
    [Event.Client.BuildInput]
    public void OnBuildInput()
    {
        SetClass("open", Input.Down(InputButton.Score));

        if (!HasClass("open"))
        {
            RemoveClass("cursor");
        }
        else
        {
            if (Input.Down(InputButton.PrimaryAttack) || Input.Down(InputButton.SecondaryAttack))
            {
                AddClass("cursor");
            }
        }
    }
	
	 private void Restart()
    {
        var spawnpoint = Entity.All.OfType<SpawnPoint>().FirstOrDefault();
        if (spawnpoint != null)
        {
            JumperGame.SetPlayerPosition(spawnpoint.Position + Vector3.Up * 10);
            Pawn.ResetStats();
        }
    }
	
	
    public override void Tick()
    {
        base.Tick();

        YourSessionTime = TimeSpan.FromSeconds((Progress.Current.TimePlayed * 60).Clamp(0, float.MaxValue)).ToString(@"dd\:hh\:mm\:ss");
    }
	
    protected override int BuildHash()
    {
        return HashCode.Combine(Jumps, Falls, MaxHeight, YourSessionTime, Completions, JumperGame.Current.IsEditorMode);
    }
}

